
// Do not modify
// Generated from "./scripts/update-site/build-pages"

import PrimitivePageMain from "~/components/Primitives/PrimitivePageMain";
import CopyPackages from "~/components/CopyPackage/CopyPackages";

/*@jsxRuntime automatic @jsxImportSource solid-js*/
import {useMDXComponents as _provideComponents} from "solid-mdx";
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    a: "a",
    h2: "h2",
    h3: "h3",
    pre: "pre",
    code: "code",
    span: "span",
    h4: "h4"
  }, _provideComponents(), props.components);
  if (!CopyPackages) _missingMdxReference("CopyPackages", true);
  return <><_components.p>{"This primitive is designed to that make reading and writing to "}<_components.a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">{"Clipboard API"}</_components.a>{" easy. It also comes with a convenient directive to write to clipboard."}</_components.p>{"\n"}<_components.h2 id="installation"><_components.a className="header-anchor" href="#installation">{"#"}</_components.a>{"Installation"}</_components.h2>{"\n"}<CopyPackages packageName="@solid-primitives/clipboard" />{"\n"}<_components.h2 id="how-to-use-it"><_components.a className="header-anchor" href="#how-to-use-it">{"#"}</_components.a>{"How to use it"}</_components.h2>{"\n"}<_components.h3 id="makeclipboard"><_components.a className="header-anchor" href="#makeclipboard">{"#"}</_components.a>{"makeClipboard"}</_components.h3>{"\n"}<_components.p>{"A basic non-reactive primitive that makes accessing the clipboard easy. Note that write supports both string and ClipboardItems object structure."}</_components.p>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"const"}</_components.span>{" [write, read, newItem] = "}<_components.span className="hljs-title function_">{"makeClipboard"}</_components.span>{"();\n"}</_components.code></_components.pre>{"\n"}<_components.h4 id="definition"><_components.a className="header-anchor" href="#definition">{"#"}</_components.a>{"Definition"}</_components.h4>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"makeClipboard"}</_components.span>{"("}<_components.span className="hljs-params" />{"): [\n  "}<_components.span className="hljs-attr">{"write"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ClipboardSetter"}</_components.span>{",\n  "}<_components.span className="hljs-attr">{"read"}</_components.span>{": "}<_components.span className="hljs-function">{"() =>"}</_components.span>{" "}<_components.span className="hljs-title class_">{"Promise"}</_components.span>{"<"}<_components.span className="hljs-title class_">{"ClipboardItems"}</_components.span>{" | "}<_components.span className="hljs-literal">{"undefined"}</_components.span>{">,\n  "}<_components.span className="hljs-attr">{"newItem"}</_components.span>{": "}<_components.span className="hljs-title class_">{"NewClipboardItem"}</_components.span>{"\n];\n"}</_components.code></_components.pre>{"\n"}<_components.h3 id="createclipboard"><_components.a className="header-anchor" href="#createclipboard">{"#"}</_components.a>{"createClipboard"}</_components.h3>{"\n"}<_components.p>{"This primitive provides full facilities for reading and writing to the clipboard. It allows for writing to clipboard via exported function or input signal. It wraps the Clipboard Async API with a resource and supplies reactive helpers to make pulling from the clipboard easy."}</_components.p>{"\n"}<_components.pre><_components.code className="hljs language-tsx"><_components.span className="hljs-keyword">{"const"}</_components.span>{" [data, setData] = "}<_components.span className="hljs-title function_">{"createSignal"}</_components.span>{"("}<_components.span className="hljs-string">{"'Hello);\nconst [clipboard, refresh] = createClipboard(data);\nsetData(\"foobar\");\nreturn (\n  <Suspense fallback={\"Loading...\"}>\n    <For each={clipboard()}>\n      {item => (\n        <Switch>\n          <Match when={item.type == \"text/plain\"}>{item.text()}</Match>\n          <Match when={item.blob() && item.type == \"image/png\"}>\n            <img class=\"w-full\" src={URL.createObjectURL(item.blob())} />\n          </Match>\n        </Switch>\n      )}\n    </For>\n  </Suspense>\n)\n"}</_components.span></_components.code></_components.pre>{"\n"}<_components.p>{"Note: The primitive binds and listens for "}<_components.code>{"clipboardchange"}</_components.code>{" meaning that clipboard changes should automatically propagate. The implementation however is buggy on certain browsers."}</_components.p>{"\n"}<_components.h4 id="definition-1"><_components.a className="header-anchor" href="#definition-1">{"#"}</_components.a>{"Definition"}</_components.h4>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"createClipboard"}</_components.span>{"("}<_components.span className="hljs-params">{"\n  data?: Accessor<"}<_components.span className="hljs-built_in">{"string"}</_components.span>{" | ClipboardItem[]>,\n  setInitial?: "}<_components.span className="hljs-built_in">{"boolean"}</_components.span>{"\n"}</_components.span>{"): [\n  "}<_components.span className="hljs-attr">{"clipboardItems"}</_components.span>{": "}<_components.span className="hljs-title class_">{"Resource"}</_components.span>{"<\n    {\n      "}<_components.span className="hljs-attr">{"type"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{";\n      "}<_components.span className="hljs-attr">{"text"}</_components.span>{": "}<_components.span className="hljs-title class_">{"Accessor"}</_components.span>{"<"}<_components.span className="hljs-built_in">{"string"}</_components.span>{">;\n      "}<_components.span className="hljs-attr">{"blob"}</_components.span>{": "}<_components.span className="hljs-title class_">{"Accessor"}</_components.span>{"<"}<_components.span className="hljs-title class_">{"Blob"}</_components.span>{">;\n    }[]\n  >,\n  "}<_components.span className="hljs-attr">{"refetch"}</_components.span>{": "}<_components.span className="hljs-title class_">{"VoidFunction"}</_components.span>{",\n  "}<_components.span className="hljs-attr">{"write"}</_components.span>{": "}<_components.span className="hljs-title class_">{"ClipboardSetter"}</_components.span>{"\n];\n"}</_components.code></_components.pre>{"\n"}<_components.h3 id="copytoclipboard"><_components.a className="header-anchor" href="#copytoclipboard">{"#"}</_components.a>{"copyToClipboard"}</_components.h3>{"\n"}<_components.p>{"You can also use clipboard as a convenient directive for setting the clipboard value. You can override the default value and the setter with the options parameter."}</_components.p>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { copyToClipboard } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"\"@solid-primitives/clipboard\""}</_components.span>{";\n"}<_components.span className="xml"><_components.span className="hljs-tag">{"<"}<_components.span className="hljs-name">{"input"}</_components.span>{" "}<_components.span className="hljs-attr">{"type"}</_components.span>{"="}<_components.span className="hljs-string">{"\"text\""}</_components.span>{" "}<_components.span className="hljs-attr">{"use:copyToClipboard"}</_components.span>{" />"}</_components.span></_components.span>{";\n"}</_components.code></_components.pre>{"\n"}<_components.h4 id="definition-2"><_components.a className="header-anchor" href="#definition-2">{"#"}</_components.a>{"Definition"}</_components.h4>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"copyToClipboard"}</_components.span>{"("}<_components.span className="hljs-params">{"\n  el: Element,\n  options: MaybeAccessor<{\n    value?: "}<_components.span className="hljs-built_in">{"any"}</_components.span>{";\n    setter?: ClipboardSetter;\n    highlight?: HighlightModifier;\n  }>\n"}</_components.span>{");\n"}</_components.code></_components.pre>{"\n"}<_components.h4 id="highlightersrange-selection"><_components.a className="header-anchor" href="#highlightersrange-selection">{"#"}</_components.a>{"Highlighters/Range Selection"}</_components.h4>{"\n"}<_components.p>{"In some scenarios you'll want to highlight or select a range of text. copyToClipboard has an option to specify the type of highlighting you'd like. Use either "}<_components.code>{"input"}</_components.code>{" or "}<_components.code>{"element"}</_components.code>{" based on the type you're making selectable."}</_components.p>{"\n"}<_components.pre><_components.code className="hljs language-tsx"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { copyToClipboard, input, element } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"\"@solid-primitives/clipboard\""}</_components.span>{";\n"}<_components.span className="xml"><_components.span className="hljs-tag">{"<"}<_components.span className="hljs-name">{"input"}</_components.span>{" "}<_components.span className="hljs-attr">{"type"}</_components.span>{"="}<_components.span className="hljs-string">{"\"text\""}</_components.span>{" "}<_components.span className="hljs-attr">{"use:copyToClipboard"}</_components.span>{"="}<_components.span className="hljs-string">{"{{"}</_components.span>{" "}<_components.span className="hljs-attr">{"highlight:"}</_components.span>{" "}<_components.span className="hljs-attr">{"input"}</_components.span>{"() }} />"}</_components.span></_components.span>{";\n"}<_components.span className="xml"><_components.span className="hljs-tag">{"<"}<_components.span className="hljs-name">{"div"}</_components.span>{" "}<_components.span className="hljs-attr">{"use:copyToClipboard"}</_components.span>{"="}<_components.span className="hljs-string">{"{{"}</_components.span>{" "}<_components.span className="hljs-attr">{"highlight:"}</_components.span>{" "}<_components.span className="hljs-attr">{"element"}</_components.span>{"("}<_components.span className="hljs-attr">{"5"}</_components.span>{", "}<_components.span className="hljs-attr">{"10"}</_components.span>{") }} />"}</_components.span></_components.span>{";\n"}</_components.code></_components.pre>{"\n"}<_components.h3 id="newitem"><_components.a className="header-anchor" href="#newitem">{"#"}</_components.a>{"newItem"}</_components.h3>{"\n"}<_components.p>{"This package ships with newItem which is a helper method for creating new ClipboardItem types."}</_components.p>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"import"}</_components.span>{" { newItem } "}<_components.span className="hljs-keyword">{"from"}</_components.span>{" "}<_components.span className="hljs-string">{"\"@solid-primitives/clipboard\""}</_components.span>{";\n"}<_components.span className="hljs-title function_">{"write"}</_components.span>{"(["}<_components.span className="hljs-title function_">{"newItem"}</_components.span>{"("}<_components.span className="hljs-string">{"\"image/png\""}</_components.span>{", "}<_components.span className="hljs-keyword">{"await"}</_components.span>{" image."}<_components.span className="hljs-title function_">{"blob"}</_components.span>{"())]);\n"}</_components.code></_components.pre>{"\n"}<_components.h4 id="definition-3"><_components.a className="header-anchor" href="#definition-3">{"#"}</_components.a>{"Definition"}</_components.h4>{"\n"}<_components.pre><_components.code className="hljs language-ts"><_components.span className="hljs-keyword">{"function"}</_components.span>{" "}<_components.span className="hljs-title function_">{"newItem"}</_components.span>{"("}<_components.span className="hljs-params"><_components.span className="hljs-keyword">{"type"}</_components.span>{": "}<_components.span className="hljs-built_in">{"string"}</_components.span>{", data: ClipboardItemData"}</_components.span>{"): "}<_components.span className="hljs-title class_">{"ClipboardItem"}</_components.span>{";\n"}</_components.code></_components.pre>{"\n"}<_components.h2 id="demo"><_components.a className="header-anchor" href="#demo">{"#"}</_components.a>{"Demo"}</_components.h2>{"\n"}<_components.p><_components.a href="https://solidjs-community.github.io/solid-primitives/clipboard/">{"Live Site"}</_components.a></_components.p>{"\n"}<_components.p>{"You may view a working example here: "}<_components.a href="https://stackblitz.com/edit/vitejs-vite-okxns7">{"StackBlitz"}</_components.a></_components.p>{"\n"}<_components.h2 id="changelog"><_components.a className="header-anchor" href="#changelog">{"#"}</_components.a>{"Changelog"}</_components.h2>{"\n"}<_components.p>{"See "}<_components.a href="./CHANGELOG.md">{"CHANGELOG.md"}</_components.a></_components.p></>;
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props} /></MDXLayout> : _createMdxContent(props);
}

function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}


export default function Index () {
  return (
    <PrimitivePageMain packageName="@solid-primitives/clipboard" name="clipboard" stage={3}>
      <MDXContent/>
    </PrimitivePageMain>
  )
}
